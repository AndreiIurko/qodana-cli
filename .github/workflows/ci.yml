name: 'CI'
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  # lint: disabled as golangci-lint is not yet ready for Go workspaces
  test:
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      pull-requests: write
      actions: read
      contents: write
      security-events: write
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: docker/login-action@v3
        with:
          registry: registry.jetbrains.team
          username: ${{ secrets.SPACE_USERNAME }}
          password: ${{ secrets.SPACE_PASSWORD }}
      - run: touch cdnet/tooling/clt.zip tooling/baseline-cli.jar tooling/intellij-report-converter.jar tooling/qodana-fuser.jar # temporary workaround
        shell: bash
      - name: Run tests (with coverage)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          set -euo pipefail
          go test -json -v $(go list -f '{{.Dir}}/...' -m | xargs) -coverprofile coverage-${{ matrix.os }}.out 2>&1 | tee /tmp/gotest.log | gotestfmt
        env:
          QODANA_LICENSE_ONLY_TOKEN: ${{ secrets.QODANA_LICENSE_ONLY_TOKEN }}
      - name: Run tests (with coverage) for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: go test -v $(go list -f '{{.Dir}}/...' -m | ForEach-Object { $_ }) -coverprofile coverage-${{ matrix.os }}.out
        env:
          QODANA_LICENSE_ONLY_TOKEN: ${{ secrets.QODANA_LICENSE_ONLY_TOKEN }}
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}.out
          path: coverage-${{ matrix.os }}.out

  code-quality:
    runs-on: ubuntu-latest
    needs: [ test ]
    permissions:
      checks: write
      pull-requests: write
      actions: read
      contents: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          registry: registry.jetbrains.team
          username: ${{ secrets.SPACE_USERNAME }}
          password: ${{ secrets.SPACE_PASSWORD }}
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: cov/
      - name: Merge coverage profiles
        run: |
          go install -v github.com/hansboder/gocovmerge@latest
          mkdir -p .qodana/code-coverage
          export PATH=$PATH:$(go env GOPATH)/bin
          ls -R cov/
          gocovmerge cov/coverage-macos-latest.out/coverage-macos-latest.out cov/coverage-ubuntu-latest.out/coverage-ubuntu-latest.out cov/coverage-windows-latest.out/coverage-windows-latest.out > .qodana/code-coverage/coverage.out
      - uses: JetBrains/qodana-action@main
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
        with:
          args: '-b,.github/qodana.sarif.json'
      - uses: github/codeql-action/init@v3
        with:
          languages: go
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

#  install-script-check:
#    strategy:
#        fail-fast: false
#        matrix:
#            os: [ubuntu-latest, macos-latest]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v4
#      - run: |
#          ./install
#          ./install nightly
